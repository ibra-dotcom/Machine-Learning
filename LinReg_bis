# 1. Split outdataset into two subsets: a training set (used for model training) and a testing set (used for evaluating model accuracy)

import numpy as np
import matplotlib.pyplot as plt

# Generate example data (you can replace this with your own dataset)
np.random.seed(2)
x = np.random.normal(3, 1, 100)
y = np.random.normal(150, 40, 100) / x

# Split data into training (80%) and testing (20%) sets
# train_x and train_y represent the training data, while test_x and test_y represent the testing data. 
# train_x = x[:80]
# train_y = y[:80]
# test_x = x[80:]
# test_y = y[80:]

#The scatter plots show the distribution of data points in each set.
# Visualize the training set
plt.scatter(train_x, train_y)
plt.show()

# Visualize the testing set
plt.scatter(test_x, test_y)
plt.show()

#2. Model Fitting:
# Once you have your training data, you can fit a model to it. Letâ€™s use polynomial regression as an example:
# Fit a polynomial regression model
mymodel = np.poly1d(np.polyfit(train_x, train_y, 4))
myline = np.linspace(0, 6, 100)

# Visualize the fitted model
plt.scatter(train_x, train_y)
plt.plot(myline, mymodel(myline))
plt.show()
